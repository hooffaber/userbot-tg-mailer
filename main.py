import asyncio
import configparser

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pyrogram import Client, filters
from pyrogram.enums import ChatType
from pyrogram.errors import FloodWait, RPCError
from pyrogram.types import Message
from pyrogram.raw import functions, types

from core.data.db_connect import DBConnect

cfg = configparser.ConfigParser()
cfg.read('config.ini')
user = Client('account', api_id=cfg['USERBOT']['API_ID'], api_hash=cfg['USERBOT']['API_HASH'])
sched = AsyncIOScheduler(timezone='Europe/Moscow')
db = DBConnect()

def has_job(data):
    async def func(flt, client, msg):
        send = sched.get_job(flt.data)
        return send is not None

    return filters.create(func, data=data)

@user.on_message(filters.me & filters.command('start'))
async def start_spamer(client: Client, msg: Message):
    data = db.time_data(return_data=True)
    await msg.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç, —á—Ç–æ–±—ã —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å.')
    sched.add_job(spam_sender, 'interval', hours=data[0], kwargs={'client': client, 'msg': msg}, id='sender', replace_existing=True)
    sched.start()

@user.on_message(filters.me and filters.text and has_job('sender'))
async def spam_sender(client: Client, msg: Message):
    counts = 0
    time_data = db.time_data(return_data=True)
    spam_data = db.spam_data(return_data=True)
    interval = time_data[1]
    text = spam_data[0]
    photo = spam_data[1]
    group_chats = [dialog.chat.id async for dialog in user.get_dialogs() if dialog.chat.type == ChatType.GROUP or dialog.chat.type == ChatType.SUPERGROUP and dialog.chat.archive]
    await msg.reply(
        f"<b>–ë–û–¢</b>: <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>, –≤—Å–µ–≥–æ —á–∞—Ç–æ–≤: <b>{len(group_chats)}</b> —à—Ç.")
    try:
        for chat in group_chats:
            try:
                if photo and text:
                    await client.send_photo(chat, photo, text)
                if text is None:
                    await client.send_photo(chat, photo)
                if photo is None:
                    await client.send_message(chat, text)
                await asyncio.sleep(interval)
                counts += 1
            except FloodWait as fw:
                await msg.reply(f"<b>–ë–û–¢</b>: –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ API Telegram!\n–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {fw.value}")
                await asyncio.sleep(fw.value)
            except RPCError:
                pass
        await msg.reply(f'<b>–ë–û–¢</b>: <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>., —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ <b>{counts}</b> —á–∞—Ç–æ–≤.')
    except Exception as e:
        await msg.reply(f"<b>–ë–û–¢</b>: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: <b>{e}</b>")

@user.on_message(filters.me & filters.text & filters.command('info'))
async def get_photo(_, msg: Message):
    spam_data = db.spam_data(return_data=True)
    text = spam_data[0]
    photo_id = spam_data[1]
    time_data = db.time_data(return_data=True)
    timer = time_data[0]
    interval = time_data[1]
    await msg.delete()
    if text and photo_id:
        await msg.reply_photo(photo_id, caption=text)
    if text is None and photo_id is not None:
        await msg.reply_photo(photo_id)
    if photo_id is None and text is not None:
        await msg.reply(text)
    await msg.reply(f'üïñ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∞: <b>{timer}—á.</b>\n„ÄΩÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{interval}—Å–µ–∫.</b>')

@user.on_message(filters.me & filters.all & filters.command('photo'))
async def get_photo(_, msg: Message):
    data = msg.command[1:]
    await msg.delete()
    if len(data) >= 1:
        db.spam_data(photo_id='del', delete=True)
        await msg.reply('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.')
        return
    db.spam_data(photo_id=str(msg.photo.file_id))
    await msg.reply('<b>üñº –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b> –∏ –±—É–¥–µ—Ç <b>–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Ç–µ–∫—Å—Ç—É</b>, –µ—Å–ª–∏ –æ–Ω <b>–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>, –∏–Ω–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –±–µ–∑ –Ω–µ–≥–æ.')

@user.on_message(filters.me & filters.all & filters.command('text'))
async def get_text(_, msg: Message):
    data = msg.command[1:]
    await msg.delete()
    if data[0] == '0':
        db.spam_data(text='del', delete=True)
        await msg.reply('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.')
        return
    db.spam_data(text=msg.text.replace('/text ', ''))
    await msg.reply('<b>‚úèÔ∏è –¢–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b> –∏ –±—É–¥–µ—Ç <b>–¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b>, –µ—Å–ª–∏ –æ–Ω–∞ <b>–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>, –∏–Ω–∞—á–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –±–µ–∑ –Ω–µ—ë.')

@user.on_message(filters.me & filters.text & filters.command('timer'))
async def get_time_data(_, msg: Message):
    data = msg.command[1:]
    await msg.delete()
    if len(data) > 0:
        timer = int(data[0])
        interval = int(data[1])
        if interval == 0 and timer == 0:
            db.time_data(1, 10)
            data = db.time_data(return_data=True)
            await msg.reply(
                f'‚ö†Ô∏è –í—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\nüïñ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∞: {data[0]}—á.\n„ÄΩÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {data[1]}—Å–µ–∫.')
        elif timer == 0:
            db.time_data(1, interval)
            data = db.time_data(return_data=True)
            await msg.reply(
                f'üîò –í—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\nüïñ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∞: {data[0]}—á.\n„ÄΩÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {data[1]}—Å–µ–∫.')
        elif interval == 0:
            db.time_data(timer, 10)
            data = db.time_data(return_data=True)
            await msg.reply(
                f'üîò –í—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\nüïñ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∞: {data[0]}—á.\n„ÄΩÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {data[1]}—Å–µ–∫.')
        else:
            db.time_data(timer, interval)
            data = db.time_data(return_data=True)
            await msg.reply(
                f'‚úÖ –í—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\nüïñ –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∏–¥—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∞: {data[0]}—á.\n„ÄΩÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {data[1]}—Å–µ–∫.')

if __name__ == '__main__':
    db.create_tables()
    user.run()
